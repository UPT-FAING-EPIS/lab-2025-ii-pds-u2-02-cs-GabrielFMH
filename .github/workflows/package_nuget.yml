name: Build, Test, Analyze and Package

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  test:
    name: Test and Analyze
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for SonarCloud analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore Notifications/Notifications.sln
        dotnet restore CustomerApp/CustomerApp.sln

    - name: Build projects
      run: |
        dotnet build Notifications/Notifications.sln --configuration Release --no-restore
        dotnet build CustomerApp/CustomerApp.sln --configuration Release --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test Notifications/Notifications.Domain.Tests/Notifications.Domain.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory coverage-results/notifications
        dotnet test CustomerApp/CustomerApp.Domain.Tests/CustomerApp.Domain.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory coverage-results/customerapp

    - name: Generate coverage reports
      run: |
        # Install report generator tool
        dotnet tool install --global dotnet-reportgenerator-globaltool

        # Generate HTML reports
        reportgenerator -reports:"coverage-results/notifications/coverage.cobertura.xml" -targetdir:"coverage-results/notifications/html" -reporttypes:Html
        reportgenerator -reports:"coverage-results/customerapp/coverage.cobertura.xml" -targetdir:"coverage-results/customerapp/html" -reporttypes:Html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage-results/
        flags: unittests
        name: codecov-umbrella

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~\.sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: SonarCloud Scan
      if: env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@v2.1.1
      with:
        arguments: >
          -Dsonar.organization=${{ github.repository_owner }}
          -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
          -Dsonar.cs.opencover.reportsPaths="coverage-results/**/coverage.cobertura.xml"
          -Dsonar.cs.vstest.reportsPaths="**/*.trx"
          -Dsonar.exclusions="**/*Tests*/**"
          -Dsonar.test.inclusions="**/*Tests*/**"

  package:
    name: Package and Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore Notifications/Notifications.sln
        dotnet restore CustomerApp/CustomerApp.sln

    - name: Build projects
      run: |
        dotnet build Notifications/Notifications.sln --configuration Release --no-restore
        dotnet build CustomerApp/CustomerApp.sln --configuration Release --no-restore

    - name: Create NuGet packages
      run: |
        # Package Notifications.Domain
        dotnet pack Notifications/Notifications.Domain/Notifications.Domain.csproj --configuration Release --no-build --output nupkgs

        # Package CustomerApp.Domain
        dotnet pack CustomerApp/CustomerApp.Domain/CustomerApp.Domain.csproj --configuration Release --no-build --output nupkgs

    - name: Upload packages to GitHub Packages
      run: |
        for package in nupkgs/*.nupkg; do
          if [ -f "$package" ]; then
            echo "Publishing $package"
            dotnet nuget push "$package" \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --api-key ${{ secrets.GITHUB_TOKEN }} \
              --skip-duplicate
          fi
        done

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: nupkgs/
        retention-days: 30