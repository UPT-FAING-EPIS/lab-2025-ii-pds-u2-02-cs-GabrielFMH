name: Create Release and Publish Packages

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version extracted: $VERSION"

    - name: Restore dependencies
      run: |
        dotnet restore Notifications/Notifications.sln
        dotnet restore CustomerApp/CustomerApp.sln

    - name: Run tests
      run: |
        dotnet test Notifications/Notifications.Domain.Tests/Notifications.Domain.Tests.csproj --configuration Release --no-restore --verbosity normal
        dotnet test CustomerApp/CustomerApp.Domain.Tests/CustomerApp.Domain.Tests.csproj --configuration Release --no-restore --verbosity normal

    - name: Build projects in Release configuration
      run: |
        dotnet build Notifications/Notifications.sln --configuration Release --no-restore
        dotnet build CustomerApp/CustomerApp.sln --configuration Release --no-restore

    - name: Create NuGet packages
      run: |
        # Create output directory for packages
        mkdir -p packages

        # Package Notifications.Domain
        dotnet pack Notifications/Notifications.Domain/Notifications.Domain.csproj \
          --configuration Release \
          --no-build \
          --output packages \
          --version-suffix ""

        # Package CustomerApp.Domain
        dotnet pack CustomerApp/CustomerApp.Domain/CustomerApp.Domain.csproj \
          --configuration Release \
          --no-build \
          --output packages \
          --version-suffix ""

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the version without v prefix for comparison
        VERSION_NO_V=$(echo ${{ steps.version.outputs.VERSION }} | sed 's/^v//')

        # Generate basic release notes
        NOTES="## Release v${VERSION_NO_V}

        ### What's New
        - Release of Notifications.Domain and CustomerApp.Domain packages
        - Version: ${VERSION_NO_V}

        ### Packages
        - Notifications.Domain.${VERSION_NO_V}.nupkg
        - CustomerApp.Domain.${VERSION_NO_V}.nupkg

        ### Installation
        \`\`\`bash
        dotnet add package Notifications.Domain --version ${VERSION_NO_V}
        dotnet add package CustomerApp.Domain --version ${VERSION_NO_V}
        \`\`\`
        "

        echo "NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.NOTES }}
        draft: false
        prerelease: false

    - name: Upload Notifications.Domain package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./packages/Notifications.Domain.${{ steps.version.outputs.VERSION }}.nupkg
        asset_name: Notifications.Domain.${{ steps.version.outputs.VERSION }}.nupkg
        asset_content_type: application/zip

    - name: Upload CustomerApp.Domain package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./packages/CustomerApp.Domain.${{ steps.version.outputs.VERSION }}.nupkg
        asset_name: CustomerApp.Domain.${{ steps.version.outputs.VERSION }}.nupkg
        asset_content_type: application/zip

    - name: Upload packages as build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ steps.version.outputs.VERSION }}
        path: packages/
        retention-days: 90

    - name: Publish to GitHub Package Registry
      run: |
        for package in packages/*.nupkg; do
          if [ -f "$package" ]; then
            echo "Publishing $package to GitHub Package Registry"
            dotnet nuget push "$package" \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --api-key ${{ secrets.GITHUB_TOKEN }} \
              --skip-duplicate
          fi
        done